{"version":3,"sources":["YoutubeEmbed.js","index.js"],"names":["YoutubeEmbed","embedId","className","width","height","src","frameBorder","allow","allowFullScreen","title","App","props","state","vid1","vid2","vid3","playlist","usedNums","a","npt","i","fetch","response","json","data","console","log","nextPageToken","this","used","Math","round","random","length","checkUsed","push","map","n","event","target","value","getPlaylist","getRandom","snippet","resourceId","videoId","setState","type","name","id","onChange","handleChange","bind","onClick","shuffle","React","Component","ReactDOM","render","document","getElementById"],"mappings":"4PAqBeA,EAlBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,qBAAKC,UAAU,mBAAf,SACE,wBACEC,MAAM,MACNC,OAAO,MACPC,IAAG,wCAAmCJ,GACtCK,YAAY,IACZC,MAAM,2FACNC,iBAAe,EACfC,MAAM,wBCRCC,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,KAAM,GACNC,KAAM,IAER,EAAKC,SAAW,GAChB,EAAKC,SAAW,GARC,EADrB,sFAWE,kCAAAC,EAAA,sDAEMC,EAAM,IACW,EACjBC,EAAI,EAJV,YAKSA,EAAI,GALb,iCAM2BC,MACrB,2DACEF,EACA,yIATR,cAMUG,EANV,gBAWuBA,EAASC,OAXhC,OAWUC,EAXV,OAYIC,QAAQC,IAAIF,EAAKG,eACjBR,EAAM,aAAeK,EAAKG,cAAgB,KACzB,EACjBP,IAfJ,uBAiBEK,QAAQC,IAAIE,KAAKZ,UAjBnB,iDAXF,oHA8BE,8BAAAE,EAAA,sDAGE,IAFIW,GAAO,EACPT,GAAK,EACFS,GACLT,EAAIU,KAAKC,MAAMD,KAAKE,SAAWJ,KAAKZ,SAASiB,QAC7CJ,EAAOD,KAAKM,UAAUd,GAL1B,OAOEQ,KAAKX,SAASkB,KAAKf,GAPrB,kBAQSA,GART,gDA9BF,6EAwCE,SAAUA,GACR,IAAIS,GAAO,EAMX,OALAD,KAAKX,SAASmB,KAAI,SAACC,GACbA,GAAKjB,IACPS,GAAO,MAGJA,IA/CX,iEAiDE,WAAmBS,GAAnB,SAAApB,EAAA,sDAC4B,QAAtBoB,EAAMC,OAAOC,OACfZ,KAAKa,cAFT,gDAjDF,mHAsDE,sBAAAvB,EAAA,kEACEU,KADF,SAE8BA,KAAKc,YAFnC,+BAEUd,KAAKZ,SAFf,MAEgD2B,QAAQC,WAAWC,QAFnE,SAG8BjB,KAAKc,YAHnC,+BAGUd,KAAKZ,SAHf,MAGgD2B,QAAQC,WAAWC,QAHnE,UAI8BjB,KAAKc,YAJnC,yBAIUd,KAAKZ,SAJf,MAIgD2B,QAAQC,WAAWC,QAJnE,MAEIhC,KAFJ,KAGIC,KAHJ,KAIIC,KAJJ,WACO+B,SADP,iEAtDF,0EA8DE,WACE,OACE,sBAAK5C,UAAU,MAAf,UACE,uBACE6C,KAAK,WACLC,KAAK,WACLC,GAAG,WACHC,SAAUtB,KAAKuB,aAAaC,KAAKxB,QAEnC,cAAC,EAAD,CAAc3B,QAAS2B,KAAKhB,MAAMC,OAClC,cAAC,EAAD,CAAcZ,QAAS2B,KAAKhB,MAAME,OAClC,cAAC,EAAD,CAAcb,QAAS2B,KAAKhB,MAAMG,OAClC,wBAAQsC,QAASzB,KAAK0B,QAAQF,KAAKxB,MAAnC,0BA1ER,sEA8EE,sBAAAV,EAAA,0FA9EF,2DAAyBqC,IAAMC,WAiF/BC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.1d71e615.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst YoutubeEmbed = ({ embedId }) => (\r\n  <div className=\"video-responsive\">\r\n    <iframe\r\n      width=\"300\"\r\n      height=\"200\"\r\n      src={`https://www.youtube.com/embed/${embedId}`}\r\n      frameBorder=\"0\"\r\n      allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n      allowFullScreen\r\n      title=\"Embedded youtube\"\r\n    />\r\n  </div>\r\n);\r\n\r\nYoutubeEmbed.propTypes = {\r\n  embedId: PropTypes.string.isRequired\r\n};\r\n\r\nexport default YoutubeEmbed;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport YoutubeEmbed from \"./YoutubeEmbed\";\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vid1: \"\",\n      vid2: \"\",\n      vid3: \"\"\n    };\n    this.playlist = [];\n    this.usedNums = [];\n  }\n  async getPlaylist() {\n    // Simple GET request using fetch\n    var npt = \"\";\n    var pagesAvailable = true;\n    var i = 0;\n    while (i < 2) {\n      const response = await fetch(\n        \"https://youtube.googleapis.com/youtube/v3/playlistItems?\" +\n          npt +\n          \"part=snippet%2CcontentDetails&maxResults=50&playlistId=PLRkzHdPAAz1RjI_nthnx479FwO7lB0VAD&key=AIzaSyCo53bQZ8CNuzgai3-ZB83eh09548lszB8\"\n      );\n      const data = await response.json();\n      console.log(data.nextPageToken);\n      npt = \"pageToken=\" + data.nextPageToken + \"&\";\n      pagesAvailable = false;\n      i++;\n    }\n    console.log(this.playlist);\n  }\n  async getRandom() {\n    var used = true;\n    var i = -1;\n    while (used) {\n      i = Math.round(Math.random() * this.playlist.length);\n      used = this.checkUsed(i);\n    }\n    this.usedNums.push(i);\n    return i;\n  }\n  checkUsed(i) {\n    var used = false;\n    this.usedNums.map((n) => {\n      if (n == i) {\n        used = true;\n      }\n    });\n    return used;\n  }\n  async handleChange(event) {\n    if (event.target.value == \"8888\") {\n      this.getPlaylist();\n    }\n  }\n  async shuffle() {\n    this.setState({\n      vid1: this.playlist[await this.getRandom()].snippet.resourceId.videoId,\n      vid2: this.playlist[await this.getRandom()].snippet.resourceId.videoId,\n      vid3: this.playlist[await this.getRandom()].snippet.resourceId.videoId\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input\n          type=\"password\"\n          name=\"password\"\n          id=\"password\"\n          onChange={this.handleChange.bind(this)}\n        />\n        <YoutubeEmbed embedId={this.state.vid1} />\n        <YoutubeEmbed embedId={this.state.vid2} />\n        <YoutubeEmbed embedId={this.state.vid3} />\n        <button onClick={this.shuffle.bind(this)}>Shuffle</button>\n      </div>\n    );\n  }\n  async componentDidMount() {}\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}